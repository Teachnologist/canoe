CSFR and XSS seem similar on the surface. There are a few differences. CSFR stands for Cross Site Forgery Request. It forces the application to act on behalf of a user to submit a malicious request. CSFR attacks occur with state changing requests, meaning some sort of variable and/or value is acted upon, possibly interacting with database CRUD functions. The problem with this sort of attack is that a privileged user could have a method run that they did not intend to run, such as charging a credit card or updating credentials. In many CSFR attacks, the real user is logged in and the script executes as them.

XSS attacks are Cross Site Script attacks. In this case, malicious scripts can be injected to websites. Like CSFR, it may exploit cookies and other authentication data to act on behalf of a user.

Both attacks can be prevented by such measures as validating parameters from GET requests, stripping and escaping characters from form entries, and properly encoding data (html_encode, json_encode,url_encode,json serialization). In addition, developers should use discretion in using other peopleâ€™s code. To prevent a CSFR attack from the developers prospective, we may include hash values and key/token with forms to insure that they are unique and served from the appropriate host; we may have the server check the header for the origin of the request and there values. Setting an expiration parameter for the token is also appropriate. A user should log off of a site before using the next site.

To prevent an XSS attack, a developer may want to include a javascript variable for a flag to make sure that the code comes from the application and is written for its intended purpose. A content security policy can be set up in the application and modifications to headers to insure that the scripts within the application are part of the application.